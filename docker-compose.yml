version: '3.7'

services:

    nginx:
        build:
            context: ./docker/nginx
        container_name: nginx
        restart: always
        ports:
            - '3000:3000'
            - '80:80'
            - '8080:8080'
        volumes:
            - ./core:/var/www
        networks:
            - app-network
        depends_on:
            - node
            - php
            - openjdk

    node:
        build:
            context: ./docker/node
        container_name: node
        restart: always
        ports:
            - '24678:24678'
        volumes:
            - ./core:/var/www
        networks:
            - app-network

    php:
        build:
            context: ./docker/php
        container_name: php
        restart: always
        volumes:
            - ./core:/var/www
        networks:
            - app-network

    openjdk:
        build:
            context: ./docker/openjdk
        container_name: openjdk
        restart: always
        volumes:
            - ./core:/var/www
        networks:
            - app-network

    # cpp:
    #     build:
    #         context: ./docker/cpp
    #     container_name: cpp
    #     restart: always
    #     environment:
    #         DISPLAY: $DISPLAY
    #     volumes:
    #         - /tmp/.X11-unix:/tmp/.X11-unix
    #         - ./core:/var/www
    #     networks:
    #         - app-network
    #     # devices:
    #     #     - /dev/video0:/dev/video0
    #     # deploy:
    #     #     resources:
    #     #         reservations:
    #     #             devices:
    #     #                 - driver: nvidia
    #     #                   count: all
    #     #                   capabilities: [ 'gpu' ]

    mysql:
        build:
            context: ./docker/mysql
        container_name: mysql
        restart: always
        ports:
            - '3306:3306'
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_USER: ${DB_USERNAME}
            MYSQL_PASSWORD: ${DB_PASSWORD}
        volumes:
            - mysql-data:/var/lib/mysql
        networks:
            - app-network

    postgres:
        build:
            context: ./docker/postgres
        container_name: postgres
        restart: always
        ports:
            - '5432:5432'
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - postgres-data:/var/lib/postgresql/data
        networks:
            - app-network

    pgadmin:
        build:
            context: ./docker/pgadmin
        container_name: pgadmin
        restart: always
        ports:
            - '15432:80'
        environment:
            PGADMIN_DEFAULT_EMAIL: '${DB_USERNAME}@mail.com'
            PGADMIN_DEFAULT_PASSWORD: ${DB_PASSWORD}
        volumes:
            - pgadmin-data:/var/lib/pgadmin
        networks:
            - app-network

    rabbitmq:
        build:
            context: ./docker/rabbitmq
        container_name: rabbitmq
        restart: always
        ports:
            - '5672:5672'
            - '15672:15672'
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
        networks:
            - app-network

    minio:
        build:
            context: ./docker/minio
        container_name: minio
        command: server --address ":9090" --console-address ":9000" /data
        restart: always
        ports:
            - '9000:9000'
            - '9090:9090'
        environment:
            MINIO_ROOT_USER: ${MINIO_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
        volumes:
            - minio-data:/data
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    mysql-data:
        driver: local

    postgres-data:
        driver: local

    pgadmin-data:
        driver: local

    minio-data:
        driver: local
